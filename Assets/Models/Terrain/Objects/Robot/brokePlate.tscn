[gd_scene load_steps=19 format=2]

[ext_resource path="res://Assets/Models/Textures/Robot/PaintedMetal007_1K_Color.jpg" type="Texture" id=1]
[ext_resource path="res://Assets/Models/Textures/Robot/Plastic006_1K_Color.jpg" type="Texture" id=2]
[ext_resource path="res://Assets/Models/Textures/Robot/Metal021_1K_Color.jpg" type="Texture" id=3]

[sub_resource type="PhysicsMaterial" id=1]
resource_name = "CylinderPhysicsMaterial"
friction = 0.5

[sub_resource type="ConcavePolygonShape" id=2]
resource_name = "Cylinder"
data = PoolVector3Array( -0.0450484, 0.978306, 0.95, -0.736783, 0.645184, 0.95, -0.736783, 0.645184, -0.95, -0.0450484, 0.978306, -0.95, -0.0450484, 0.978306, 0.95, -0.736783, 0.645184, -0.95, 0.465058, -0.861877, 0.95, 0.943753, -0.261613, 0.95, 0.943753, -0.261613, -0.95, 0.465058, -0.861877, -0.95, 0.465058, -0.861877, 0.95, 0.943753, -0.261613, -0.95, -0.383884, -0.900969, 0.95, 0.383884, -0.900969, 0.95, 0.383884, -0.900969, -0.95, -0.383884, -0.900969, -0.95, -0.383884, -0.900969, 0.95, 0.383884, -0.900969, -0.95, -0.943753, -0.261613, 0.95, -0.465058, -0.861877, 0.95, -0.465058, -0.861877, -0.95, -0.943753, -0.261613, -0.95, -0.943753, -0.261613, 0.95, -0.465058, -0.861877, -0.95, -0.792958, 0.574743, 0.95, -0.963802, -0.173775, 0.95, -0.963802, -0.173775, -0.95, -0.792958, 0.574743, -0.95, -0.792958, 0.574743, 0.95, -0.963802, -0.173775, -0.95, 0.963802, -0.173775, 0.95, 0.792958, 0.574743, 0.95, 0.792958, 0.574743, -0.95, 0.963802, -0.173775, -0.95, 0.963802, -0.173775, 0.95, 0.792958, 0.574743, -0.95, -5.96046e-08, 0.944504, 1, 0.738443, 0.588889, 1, 0.920823, -0.210172, 1, -0.920823, -0.210172, 1, -0.738443, 0.588889, 1, -5.96046e-08, 0.944504, 1, 0.409805, -0.850969, 1, -0.409805, -0.850969, 1, -0.920823, -0.210172, 1, -5.96046e-08, 0.944504, 1, 0.920823, -0.210172, 1, 0.409805, -0.850969, 1, 0.409805, -0.850969, 1, -0.920823, -0.210172, 1, -5.96046e-08, 0.944504, 1, 0.736783, 0.645184, 0.95, 0.0450485, 0.978306, 0.95, 0.0450485, 0.978306, -0.95, 0.736783, 0.645184, -0.95, 0.736783, 0.645184, 0.95, 0.0450485, 0.978306, -0.95, 0.0450485, 0.978306, -0.95, -0.0450484, 0.978306, -0.95, -5.58794e-08, 0.944504, -1, -0.0450484, 0.978306, 0.95, 0.0450485, 0.978306, 0.95, -5.96046e-08, 0.944504, 1, 0.792958, 0.574743, -0.95, 0.736783, 0.645184, -0.95, 0.738443, 0.588889, -1, 0.736783, 0.645184, 0.95, 0.792958, 0.574743, 0.95, 0.738443, 0.588889, 1, 0.943753, -0.261613, -0.95, 0.963802, -0.173775, -0.95, 0.920823, -0.210172, -1, 0.963802, -0.173775, 0.95, 0.943753, -0.261613, 0.95, 0.920823, -0.210172, 1, 0.383884, -0.900969, -0.95, 0.465058, -0.861877, -0.95, 0.409805, -0.850969, -1, 0.465058, -0.861877, 0.95, 0.383884, -0.900969, 0.95, 0.409805, -0.850969, 1, -0.465058, -0.861877, -0.95, -0.383884, -0.900969, -0.95, -0.409805, -0.850969, -1, -0.383884, -0.900969, 0.95, -0.465058, -0.861877, 0.95, -0.409805, -0.850969, 1, -0.963802, -0.173775, -0.95, -0.943753, -0.261613, -0.95, -0.920823, -0.210172, -1, -0.943753, -0.261613, 0.95, -0.963802, -0.173775, 0.95, -0.920823, -0.210172, 1, -0.736783, 0.645184, -0.95, -0.792958, 0.574743, -0.95, -0.738443, 0.588889, -1, -0.792958, 0.574743, 0.95, -0.736783, 0.645184, 0.95, -0.738443, 0.588889, 1, 0.738443, 0.588889, -1, 0.736783, 0.645184, -0.95, 0.0450485, 0.978306, -0.95, -5.58794e-08, 0.944504, -1, 0.738443, 0.588889, -1, 0.0450485, 0.978306, -0.95, -5.96046e-08, 0.944504, 1, 0.0450485, 0.978306, 0.95, 0.736783, 0.645184, 0.95, 0.738443, 0.588889, 1, -5.96046e-08, 0.944504, 1, 0.736783, 0.645184, 0.95, 0.0450485, 0.978306, 0.95, -0.0450484, 0.978306, 0.95, -0.0450484, 0.978306, -0.95, 0.0450485, 0.978306, -0.95, 0.0450485, 0.978306, 0.95, -0.0450484, 0.978306, -0.95, 0.736783, 0.645184, -0.95, 0.792958, 0.574743, -0.95, 0.792958, 0.574743, 0.95, 0.736783, 0.645184, 0.95, 0.736783, 0.645184, -0.95, 0.792958, 0.574743, 0.95, 0.920823, -0.210172, -1, 0.963802, -0.173775, -0.95, 0.792958, 0.574743, -0.95, 0.738443, 0.588889, -1, 0.920823, -0.210172, -1, 0.792958, 0.574743, -0.95, 0.738443, 0.588889, 1, 0.792958, 0.574743, 0.95, 0.963802, -0.173775, 0.95, 0.920823, -0.210172, 1, 0.738443, 0.588889, 1, 0.963802, -0.173775, 0.95, 0.963802, -0.173775, -0.95, 0.943753, -0.261613, -0.95, 0.943753, -0.261613, 0.95, 0.963802, -0.173775, 0.95, 0.963802, -0.173775, -0.95, 0.943753, -0.261613, 0.95, 0.409805, -0.850969, -1, 0.465058, -0.861877, -0.95, 0.943753, -0.261613, -0.95, 0.920823, -0.210172, -1, 0.409805, -0.850969, -1, 0.943753, -0.261613, -0.95, 0.920823, -0.210172, 1, 0.943753, -0.261613, 0.95, 0.465058, -0.861877, 0.95, 0.409805, -0.850969, 1, 0.920823, -0.210172, 1, 0.465058, -0.861877, 0.95, 0.465058, -0.861877, -0.95, 0.383884, -0.900969, -0.95, 0.383884, -0.900969, 0.95, 0.465058, -0.861877, 0.95, 0.465058, -0.861877, -0.95, 0.383884, -0.900969, 0.95, -0.409805, -0.850969, -1, -0.383884, -0.900969, -0.95, 0.383884, -0.900969, -0.95, 0.409805, -0.850969, -1, -0.409805, -0.850969, -1, 0.383884, -0.900969, -0.95, 0.409805, -0.850969, 1, 0.383884, -0.900969, 0.95, -0.383884, -0.900969, 0.95, -0.409805, -0.850969, 1, 0.409805, -0.850969, 1, -0.383884, -0.900969, 0.95, -0.383884, -0.900969, -0.95, -0.465058, -0.861877, -0.95, -0.465058, -0.861877, 0.95, -0.383884, -0.900969, 0.95, -0.383884, -0.900969, -0.95, -0.465058, -0.861877, 0.95, -0.920823, -0.210172, -1, -0.943753, -0.261613, -0.95, -0.465058, -0.861877, -0.95, -0.409805, -0.850969, -1, -0.920823, -0.210172, -1, -0.465058, -0.861877, -0.95, -0.409805, -0.850969, 1, -0.465058, -0.861877, 0.95, -0.943753, -0.261613, 0.95, -0.920823, -0.210172, 1, -0.409805, -0.850969, 1, -0.943753, -0.261613, 0.95, -0.943753, -0.261613, -0.95, -0.963802, -0.173775, -0.95, -0.963802, -0.173775, 0.95, -0.943753, -0.261613, 0.95, -0.943753, -0.261613, -0.95, -0.963802, -0.173775, 0.95, -0.738443, 0.588889, -1, -0.792958, 0.574743, -0.95, -0.963802, -0.173775, -0.95, -0.920823, -0.210172, -1, -0.738443, 0.588889, -1, -0.963802, -0.173775, -0.95, -0.920823, -0.210172, 1, -0.963802, -0.173775, 0.95, -0.792958, 0.574743, 0.95, -0.738443, 0.588889, 1, -0.920823, -0.210172, 1, -0.792958, 0.574743, 0.95, -0.792958, 0.574743, -0.95, -0.736783, 0.645184, -0.95, -0.736783, 0.645184, 0.95, -0.792958, 0.574743, 0.95, -0.792958, 0.574743, -0.95, -0.736783, 0.645184, 0.95, -5.58794e-08, 0.944504, -1, -0.0450484, 0.978306, -0.95, -0.736783, 0.645184, -0.95, -0.738443, 0.588889, -1, -5.58794e-08, 0.944504, -1, -0.736783, 0.645184, -0.95, -0.738443, 0.588889, 1, -0.736783, 0.645184, 0.95, -0.0450484, 0.978306, 0.95, -5.96046e-08, 0.944504, 1, -0.738443, 0.588889, 1, -0.0450484, 0.978306, 0.95, 0.738443, 0.588889, -1, -5.58794e-08, 0.944504, -1, -0.738443, 0.588889, -1, 0.409805, -0.850969, -1, 0.920823, -0.210172, -1, 0.738443, 0.588889, -1, -0.920823, -0.210172, -1, -0.409805, -0.850969, -1, 0.409805, -0.850969, -1, 0.738443, 0.588889, -1, -0.738443, 0.588889, -1, -0.920823, -0.210172, -1, -0.920823, -0.210172, -1, 0.409805, -0.850969, -1, 0.738443, 0.588889, -1 )

[sub_resource type="Shader" id=3]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.11927607655525208, 0.11927607655525208,
		0.11927607655525208, 1.0);
	float node1_in4_metallic = float(0.10294093936681747);
	float node1_in5_specular = float(0.30882352590560913);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.0);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/texture_0 = ExtResource( 1 )

[sub_resource type="ArrayMesh" id=5]
resource_name = "Cylinder"
surfaces/0 = {
"aabb": AABB( -0.963802, -1, -0.978306, 1.9276, 2, 1.87928 ),
"array_data": PoolByteArray( 208, 157, 60, 191, 51, 51, 115, 191, 199, 42, 37, 191, 185, 213, 161, 0, 155, 2, 75, 127, 78, 48, 204, 55, 208, 157, 60, 191, 51, 51, 115, 63, 199, 42, 37, 191, 185, 43, 161, 0, 155, 254, 75, 127, 78, 48, 102, 34, 172, 132, 56, 189, 51, 51, 115, 63, 67, 114, 122, 191, 227, 43, 141, 0, 134, 2, 32, 127, 54, 32, 102, 34, 172, 132, 56, 189, 51, 51, 115, 191, 67, 114, 122, 191, 227, 213, 141, 0, 134, 254, 32, 127, 54, 32, 204, 55, 204, 153, 113, 63, 51, 51, 115, 191, 36, 242, 133, 62, 106, 213, 54, 0, 58, 2, 144, 127, 165, 57, 204, 55, 204, 153, 113, 63, 51, 51, 115, 63, 36, 242, 133, 62, 106, 43, 54, 0, 58, 254, 144, 127, 165, 57, 102, 34, 21, 28, 238, 62, 51, 51, 115, 63, 249, 163, 92, 63, 76, 43, 91, 0, 96, 2, 174, 127, 163, 56, 102, 34, 21, 28, 238, 62, 51, 51, 115, 191, 249, 163, 92, 63, 76, 213, 91, 0, 96, 254, 174, 127, 163, 56, 204, 55, 114, 140, 196, 62, 51, 51, 115, 191, 232, 165, 102, 63, 23, 213, 116, 0, 124, 2, 232, 127, 129, 56, 204, 55, 114, 140, 196, 62, 51, 51, 115, 63, 232, 165, 102, 63, 23, 43, 116, 0, 124, 254, 232, 127, 129, 56, 102, 34, 114, 140, 196, 190, 51, 51, 115, 63, 232, 165, 102, 63, 233, 43, 116, 0, 124, 2, 24, 127, 253, 54, 102, 34, 114, 140, 196, 190, 51, 51, 115, 191, 232, 165, 102, 63, 233, 213, 116, 0, 124, 254, 24, 127, 253, 54, 204, 55, 21, 28, 238, 190, 51, 51, 115, 191, 249, 163, 92, 63, 180, 213, 91, 0, 96, 2, 82, 127, 185, 54, 204, 55, 21, 28, 238, 190, 51, 51, 115, 63, 249, 163, 92, 63, 180, 43, 91, 0, 96, 254, 82, 127, 185, 54, 102, 34, 204, 153, 113, 191, 51, 51, 115, 63, 36, 242, 133, 62, 150, 43, 54, 0, 58, 2, 112, 127, 180, 52, 102, 34, 204, 153, 113, 191, 51, 51, 115, 191, 36, 242, 133, 62, 150, 213, 54, 0, 58, 254, 112, 127, 180, 52, 204, 55, 186, 187, 118, 191, 51, 51, 115, 191, 19, 242, 49, 62, 137, 213, 253, 0, 252, 2, 126, 127, 112, 52, 204, 55, 186, 187, 118, 191, 51, 51, 115, 63, 19, 242, 49, 62, 137, 43, 253, 0, 252, 254, 126, 127, 112, 52, 102, 34, 76, 255, 74, 191, 51, 51, 115, 63, 91, 34, 19, 191, 148, 43, 208, 0, 205, 2, 116, 127, 213, 48, 102, 34, 76, 255, 74, 191, 51, 51, 115, 191, 91, 34, 19, 191, 148, 213, 208, 0, 205, 254, 116, 127, 213, 48, 204, 55, 76, 255, 74, 63, 51, 51, 115, 191, 91, 34, 19, 191, 108, 213, 208, 0, 205, 2, 140, 127, 202, 58, 204, 55, 76, 255, 74, 63, 51, 51, 115, 63, 91, 34, 19, 191, 108, 43, 208, 0, 205, 254, 140, 127, 202, 58, 102, 34, 186, 187, 118, 63, 51, 51, 115, 63, 19, 242, 49, 62, 119, 43, 253, 0, 252, 2, 130, 127, 199, 57, 102, 34, 186, 187, 118, 63, 51, 51, 115, 191, 19, 242, 49, 62, 119, 213, 253, 0, 252, 254, 130, 127, 199, 57, 204, 55, 243, 255, 127, 179, 0, 0, 128, 63, 4, 203, 113, 191, 0, 110, 195, 0, 127, 0, 0, 127, 0, 52, 47, 56, 14, 187, 107, 191, 0, 0, 128, 63, 84, 55, 87, 62, 196, 110, 13, 0, 111, 59, 7, 127, 108, 39, 103, 58, 246, 209, 209, 62, 0, 0, 128, 63, 27, 217, 89, 63, 26, 110, 55, 0, 124, 233, 244, 127, 146, 53, 162, 59, 199, 132, 56, 61, 51, 51, 115, 191, 67, 114, 122, 191, 29, 213, 141, 0, 134, 8, 222, 127, 239, 59, 204, 55, 199, 132, 56, 61, 51, 51, 115, 63, 67, 114, 122, 191, 29, 43, 141, 0, 134, 248, 222, 127, 239, 59, 102, 34, 208, 157, 60, 63, 51, 51, 115, 63, 199, 42, 37, 191, 71, 43, 161, 0, 155, 2, 181, 127, 236, 58, 102, 34, 208, 157, 60, 63, 51, 51, 115, 191, 199, 42, 37, 191, 71, 213, 161, 0, 155, 254, 181, 127, 236, 58, 204, 55, 13, 0, 112, 179, 0, 0, 128, 191, 4, 203, 113, 191, 0, 146, 195, 0, 127, 0, 0, 129, 15, 28, 0, 56, 172, 132, 56, 189, 51, 51, 115, 191, 67, 114, 122, 191, 227, 213, 141, 0, 127, 0, 0, 129, 0, 0, 204, 55, 199, 132, 56, 61, 51, 51, 115, 191, 67, 114, 122, 191, 29, 213, 141, 0, 127, 0, 0, 129, 0, 0, 204, 55, 243, 255, 127, 179, 0, 0, 128, 63, 4, 203, 113, 191, 0, 110, 195, 0, 127, 0, 0, 129, 247, 59, 0, 0, 199, 132, 56, 61, 51, 51, 115, 63, 67, 114, 122, 191, 29, 43, 141, 0, 127, 0, 0, 129, 0, 60, 102, 34, 172, 132, 56, 189, 51, 51, 115, 63, 67, 114, 122, 191, 227, 43, 141, 0, 127, 0, 0, 129, 0, 60, 102, 34, 154, 10, 61, 63, 0, 0, 128, 191, 110, 193, 22, 191, 48, 146, 218, 0, 15, 47, 140, 127, 227, 58, 0, 56, 208, 157, 60, 63, 51, 51, 115, 191, 199, 42, 37, 191, 71, 213, 161, 0, 229, 103, 188, 127, 236, 58, 0, 56, 76, 255, 74, 63, 51, 51, 115, 191, 91, 34, 19, 191, 108, 213, 208, 0, 249, 86, 164, 127, 219, 58, 204, 55, 154, 10, 61, 63, 0, 0, 128, 63, 110, 193, 22, 191, 48, 110, 218, 0, 15, 209, 140, 127, 227, 58, 0, 0, 76, 255, 74, 63, 51, 51, 115, 63, 91, 34, 19, 191, 108, 43, 208, 0, 249, 170, 164, 127, 219, 58, 102, 34, 208, 157, 60, 63, 51, 51, 115, 63, 199, 42, 37, 191, 71, 43, 161, 0, 229, 153, 188, 127, 236, 58, 0, 0, 14, 187, 107, 63, 0, 0, 128, 191, 84, 55, 87, 62, 60, 146, 13, 0, 101, 47, 196, 127, 190, 57, 0, 56, 186, 187, 118, 63, 51, 51, 115, 191, 19, 242, 49, 62, 119, 213, 253, 0, 36, 103, 193, 127, 199, 57, 0, 56, 204, 153, 113, 63, 51, 51, 115, 191, 36, 242, 133, 62, 106, 213, 54, 0, 68, 86, 193, 127, 182, 57, 204, 55, 14, 187, 107, 63, 0, 0, 128, 63, 84, 55, 87, 62, 60, 110, 13, 0, 127, 0, 0, 129, 190, 57, 0, 0, 204, 153, 113, 63, 51, 51, 115, 63, 36, 242, 133, 62, 106, 43, 54, 0, 127, 0, 0, 129, 182, 57, 102, 34, 186, 187, 118, 63, 51, 51, 115, 63, 19, 242, 49, 62, 119, 43, 253, 0, 127, 0, 0, 129, 182, 57, 102, 34, 246, 209, 209, 62, 0, 0, 128, 191, 27, 217, 89, 63, 26, 146, 55, 0, 110, 47, 41, 127, 154, 56, 0, 56, 21, 28, 238, 62, 51, 51, 115, 191, 249, 163, 92, 63, 76, 213, 91, 0, 72, 103, 245, 127, 163, 56, 0, 56, 114, 140, 196, 62, 51, 51, 115, 191, 232, 165, 102, 63, 23, 213, 116, 0, 92, 86, 13, 127, 146, 56, 204, 55, 246, 209, 209, 62, 0, 0, 128, 63, 27, 217, 89, 63, 26, 110, 55, 0, 110, 209, 41, 127, 154, 56, 0, 0, 114, 140, 196, 62, 51, 51, 115, 63, 232, 165, 102, 63, 23, 43, 116, 0, 92, 170, 13, 127, 146, 56, 102, 34, 21, 28, 238, 62, 51, 51, 115, 63, 249, 163, 92, 63, 76, 43, 91, 0, 72, 153, 245, 127, 163, 56, 0, 0, 246, 209, 209, 190, 0, 0, 128, 191, 27, 217, 89, 63, 230, 146, 55, 0, 110, 209, 215, 127, 203, 54, 0, 56, 114, 140, 196, 190, 51, 51, 115, 191, 232, 165, 102, 63, 233, 213, 116, 0, 92, 170, 243, 127, 219, 54, 204, 55, 21, 28, 238, 190, 51, 51, 115, 191, 249, 163, 92, 63, 180, 213, 91, 0, 72, 153, 11, 127, 185, 54, 0, 56, 246, 209, 209, 190, 0, 0, 128, 63, 27, 217, 89, 63, 230, 110, 55, 0, 110, 47, 215, 127, 203, 54, 0, 0, 21, 28, 238, 190, 51, 51, 115, 63, 249, 163, 92, 63, 180, 43, 91, 0, 72, 103, 11, 127, 185, 54, 0, 0, 114, 140, 196, 190, 51, 51, 115, 63, 232, 165, 102, 63, 233, 43, 116, 0, 92, 86, 243, 127, 219, 54, 102, 34, 14, 187, 107, 191, 0, 0, 128, 191, 84, 55, 87, 62, 196, 146, 13, 0, 127, 0, 0, 129, 162, 52, 0, 56, 204, 153, 113, 191, 51, 51, 115, 191, 36, 242, 133, 62, 150, 213, 54, 0, 127, 0, 0, 129, 146, 52, 204, 55, 186, 187, 118, 191, 51, 51, 115, 191, 19, 242, 49, 62, 137, 213, 253, 0, 127, 0, 0, 129, 146, 52, 204, 55, 14, 187, 107, 191, 0, 0, 128, 63, 84, 55, 87, 62, 196, 110, 13, 0, 101, 47, 60, 127, 130, 52, 0, 0, 186, 187, 118, 191, 51, 51, 115, 63, 19, 242, 49, 62, 137, 43, 253, 0, 36, 103, 63, 127, 112, 52, 0, 0, 204, 153, 113, 191, 51, 51, 115, 63, 36, 242, 133, 62, 150, 43, 54, 0, 68, 86, 63, 127, 146, 52, 102, 34, 154, 10, 61, 191, 0, 0, 128, 191, 110, 193, 22, 191, 208, 146, 218, 0, 15, 209, 116, 127, 113, 48, 0, 56, 76, 255, 74, 191, 51, 51, 115, 191, 91, 34, 19, 191, 148, 213, 208, 0, 249, 170, 92, 127, 146, 48, 204, 55, 208, 157, 60, 191, 51, 51, 115, 191, 199, 42, 37, 191, 185, 213, 161, 0, 229, 153, 68, 127, 78, 48, 0, 56, 154, 10, 61, 191, 0, 0, 128, 63, 110, 193, 22, 191, 208, 110, 218, 0, 127, 0, 0, 129, 178, 48, 0, 0, 208, 157, 60, 191, 51, 51, 115, 63, 199, 42, 37, 191, 185, 43, 161, 0, 127, 0, 0, 129, 146, 48, 102, 34, 76, 255, 74, 191, 51, 51, 115, 63, 91, 34, 19, 191, 148, 43, 208, 0, 127, 0, 0, 129, 146, 48, 102, 34, 154, 10, 61, 63, 0, 0, 128, 191, 110, 193, 22, 191, 48, 146, 218, 0, 150, 233, 192, 127, 227, 58, 0, 56, 13, 0, 112, 179, 0, 0, 128, 191, 4, 203, 113, 191, 0, 146, 195, 0, 139, 23, 214, 127, 247, 59, 0, 56, 243, 255, 127, 179, 0, 0, 128, 63, 4, 203, 113, 191, 0, 110, 195, 0, 139, 233, 214, 127, 247, 59, 0, 0, 154, 10, 61, 63, 0, 0, 128, 63, 110, 193, 22, 191, 48, 110, 218, 0, 150, 23, 192, 127, 227, 58, 0, 0, 199, 132, 56, 61, 51, 51, 115, 63, 67, 114, 122, 191, 29, 43, 141, 0, 133, 10, 229, 127, 0, 0, 102, 34, 199, 132, 56, 61, 51, 51, 115, 191, 67, 114, 122, 191, 29, 213, 141, 0, 133, 246, 229, 127, 0, 0, 204, 55, 14, 187, 107, 63, 0, 0, 128, 191, 84, 55, 87, 62, 60, 146, 13, 0, 241, 233, 133, 127, 190, 57, 0, 56, 154, 10, 61, 63, 0, 0, 128, 191, 110, 193, 22, 191, 48, 146, 218, 0, 217, 23, 138, 127, 211, 58, 0, 56, 154, 10, 61, 63, 0, 0, 128, 63, 110, 193, 22, 191, 48, 110, 218, 0, 217, 233, 138, 127, 211, 58, 0, 0, 14, 187, 107, 63, 0, 0, 128, 63, 84, 55, 87, 62, 60, 110, 13, 0, 241, 23, 133, 127, 190, 57, 0, 0, 246, 209, 209, 62, 0, 0, 128, 191, 27, 217, 89, 63, 26, 146, 55, 0, 86, 233, 167, 127, 154, 56, 0, 56, 14, 187, 107, 63, 0, 0, 128, 191, 84, 55, 87, 62, 60, 146, 13, 0, 67, 23, 152, 127, 174, 57, 0, 56, 14, 187, 107, 63, 0, 0, 128, 63, 84, 55, 87, 62, 60, 110, 13, 0, 67, 233, 152, 127, 174, 57, 0, 0, 246, 209, 209, 62, 0, 0, 128, 63, 27, 217, 89, 63, 26, 110, 55, 0, 86, 23, 167, 127, 154, 56, 0, 0, 246, 209, 209, 190, 0, 0, 128, 191, 27, 217, 89, 63, 230, 146, 55, 0, 124, 233, 12, 127, 235, 54, 0, 56, 246, 209, 209, 62, 0, 0, 128, 191, 27, 217, 89, 63, 26, 146, 55, 0, 124, 23, 244, 127, 138, 56, 0, 56, 246, 209, 209, 62, 0, 0, 128, 63, 27, 217, 89, 63, 26, 110, 55, 0, 124, 233, 244, 127, 138, 56, 0, 0, 246, 209, 209, 190, 0, 0, 128, 63, 27, 217, 89, 63, 230, 110, 55, 0, 124, 23, 12, 127, 235, 54, 0, 0, 14, 187, 107, 191, 0, 0, 128, 191, 84, 55, 87, 62, 196, 146, 13, 0, 67, 233, 104, 127, 162, 52, 0, 56, 246, 209, 209, 190, 0, 0, 128, 191, 27, 217, 89, 63, 230, 146, 55, 0, 86, 23, 89, 127, 203, 54, 0, 56, 246, 209, 209, 190, 0, 0, 128, 63, 27, 217, 89, 63, 230, 110, 55, 0, 86, 233, 89, 127, 203, 54, 0, 0, 14, 187, 107, 191, 0, 0, 128, 63, 84, 55, 87, 62, 196, 110, 13, 0, 67, 23, 104, 127, 162, 52, 0, 0, 154, 10, 61, 191, 0, 0, 128, 191, 110, 193, 22, 191, 208, 146, 218, 0, 217, 233, 118, 127, 178, 48, 0, 56, 14, 187, 107, 191, 0, 0, 128, 191, 84, 55, 87, 62, 196, 146, 13, 0, 241, 23, 123, 127, 130, 52, 0, 56, 14, 187, 107, 191, 0, 0, 128, 63, 84, 55, 87, 62, 196, 110, 13, 0, 241, 233, 123, 127, 130, 52, 0, 0, 154, 10, 61, 191, 0, 0, 128, 63, 110, 193, 22, 191, 208, 110, 218, 0, 217, 23, 118, 127, 178, 48, 0, 0, 13, 0, 112, 179, 0, 0, 128, 191, 4, 203, 113, 191, 0, 146, 195, 0, 139, 233, 42, 127, 15, 28, 0, 56, 154, 10, 61, 191, 0, 0, 128, 191, 110, 193, 22, 191, 208, 146, 218, 0, 150, 23, 64, 127, 113, 48, 0, 56, 154, 10, 61, 191, 0, 0, 128, 63, 110, 193, 22, 191, 208, 110, 218, 0, 150, 233, 64, 127, 113, 48, 0, 0, 243, 255, 127, 179, 0, 0, 128, 63, 4, 203, 113, 191, 0, 110, 195, 0, 139, 23, 42, 127, 15, 28, 0, 0, 154, 10, 61, 191, 0, 0, 128, 191, 110, 193, 22, 191, 208, 146, 218, 0, 117, 211, 241, 129, 149, 56, 222, 56, 154, 10, 61, 63, 0, 0, 128, 191, 110, 193, 22, 191, 48, 146, 218, 0, 117, 45, 15, 129, 106, 59, 222, 56, 246, 209, 209, 62, 0, 0, 128, 191, 27, 217, 89, 63, 26, 146, 55, 0, 124, 23, 244, 129, 201, 58, 162, 59, 14, 187, 107, 63, 0, 0, 128, 63, 84, 55, 87, 62, 60, 110, 13, 0, 111, 197, 249, 127, 137, 55, 103, 58, 154, 10, 61, 63, 0, 0, 128, 63, 110, 193, 22, 191, 48, 110, 218, 0, 117, 211, 15, 127, 213, 54, 222, 56, 154, 10, 61, 191, 0, 0, 128, 63, 110, 193, 22, 191, 208, 110, 218, 0, 117, 45, 241, 127, 168, 44, 222, 56, 246, 209, 209, 190, 0, 0, 128, 63, 27, 217, 89, 63, 230, 110, 55, 0, 124, 23, 12, 127, 218, 48, 162, 59, 13, 0, 112, 179, 0, 0, 128, 191, 4, 203, 113, 191, 0, 146, 195, 0, 127, 0, 0, 129, 0, 58, 47, 56, 14, 187, 107, 63, 0, 0, 128, 191, 84, 55, 87, 62, 60, 146, 13, 0, 111, 59, 249, 129, 196, 59, 103, 58, 246, 209, 209, 190, 0, 0, 128, 191, 27, 217, 89, 63, 230, 146, 55, 0, 124, 233, 12, 129, 54, 57, 162, 59, 14, 187, 107, 191, 0, 0, 128, 191, 84, 55, 87, 62, 196, 146, 13, 0, 111, 197, 7, 129, 59, 56, 103, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 4, 0, 6, 0, 5, 0, 4, 0, 7, 0, 6, 0, 8, 0, 10, 0, 9, 0, 8, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 16, 0, 18, 0, 17, 0, 16, 0, 19, 0, 18, 0, 20, 0, 22, 0, 21, 0, 20, 0, 23, 0, 22, 0, 24, 0, 26, 0, 25, 0, 27, 0, 29, 0, 28, 0, 27, 0, 30, 0, 29, 0, 31, 0, 33, 0, 32, 0, 34, 0, 36, 0, 35, 0, 37, 0, 39, 0, 38, 0, 40, 0, 42, 0, 41, 0, 43, 0, 45, 0, 44, 0, 46, 0, 48, 0, 47, 0, 49, 0, 51, 0, 50, 0, 52, 0, 54, 0, 53, 0, 55, 0, 57, 0, 56, 0, 58, 0, 60, 0, 59, 0, 61, 0, 63, 0, 62, 0, 64, 0, 66, 0, 65, 0, 67, 0, 69, 0, 68, 0, 70, 0, 72, 0, 71, 0, 27, 0, 73, 0, 30, 0, 27, 0, 74, 0, 73, 0, 29, 0, 75, 0, 28, 0, 29, 0, 76, 0, 75, 0, 3, 0, 77, 0, 2, 0, 3, 0, 78, 0, 77, 0, 21, 0, 30, 0, 20, 0, 21, 0, 29, 0, 30, 0, 20, 0, 79, 0, 23, 0, 20, 0, 80, 0, 79, 0, 22, 0, 81, 0, 21, 0, 22, 0, 82, 0, 81, 0, 5, 0, 23, 0, 4, 0, 5, 0, 22, 0, 23, 0, 4, 0, 83, 0, 7, 0, 4, 0, 84, 0, 83, 0, 6, 0, 85, 0, 5, 0, 6, 0, 86, 0, 85, 0, 9, 0, 7, 0, 8, 0, 9, 0, 6, 0, 7, 0, 8, 0, 87, 0, 11, 0, 8, 0, 88, 0, 87, 0, 10, 0, 89, 0, 9, 0, 10, 0, 90, 0, 89, 0, 13, 0, 11, 0, 12, 0, 13, 0, 10, 0, 11, 0, 12, 0, 91, 0, 15, 0, 12, 0, 92, 0, 91, 0, 14, 0, 93, 0, 13, 0, 14, 0, 94, 0, 93, 0, 17, 0, 15, 0, 16, 0, 17, 0, 14, 0, 15, 0, 16, 0, 95, 0, 19, 0, 16, 0, 96, 0, 95, 0, 18, 0, 97, 0, 17, 0, 18, 0, 98, 0, 97, 0, 1, 0, 19, 0, 0, 0, 1, 0, 18, 0, 19, 0, 0, 0, 99, 0, 3, 0, 0, 0, 100, 0, 99, 0, 2, 0, 101, 0, 1, 0, 2, 0, 102, 0, 101, 0, 103, 0, 105, 0, 104, 0, 106, 0, 24, 0, 107, 0, 24, 0, 25, 0, 108, 0, 25, 0, 26, 0, 109, 0, 26, 0, 24, 0, 106, 0, 103, 0, 104, 0, 110, 0, 104, 0, 105, 0, 111, 0, 105, 0, 113, 0, 112, 0, 113, 0, 105, 0, 103, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 240,
"material": SubResource( 4 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 114
}

[sub_resource type="PhysicsMaterial" id=6]
resource_name = "IcospherePhysicsMaterial"
friction = 0.5

[sub_resource type="ConcavePolygonShape" id=7]
resource_name = "Icosphere"
data = PoolVector3Array( 0.158619, -0.488187, 0.839755, 0.671937, -0.488189, 0.522511, 0.269861, -0.83056, 0.445849, -0.415278, -0.301714, 0.839755, -0.256661, -0.789905, 0.522512, -0.706518, -0.513309, 0.445848, -0.415278, 0.301714, 0.839755, -0.830558, -1.18994e-10, 0.52251, -0.706518, 0.513309, 0.445848, 0.158619, 0.488187, 0.839755, -0.256661, 0.789905, 0.522512, 0.269861, 0.83056, 0.445849, 0.513314, -1.18994e-10, 0.839753, 0.671937, 0.488189, 0.522511, 0.873303, -1.18994e-10, 0.445844, -2.15973e-08, -1.18994e-10, 0.985574, 0.158619, 0.488187, 0.839755, 0.513314, -1.18994e-10, 0.839753, 0.158619, 0.488187, 0.839755, 0.671937, 0.488189, 0.522511, 0.513314, -1.18994e-10, 0.839753, 0.158619, 0.488187, 0.839755, 0.269861, 0.83056, 0.445849, 0.671937, 0.488189, 0.522511, -2.15973e-08, -1.18994e-10, 0.985574, -0.415278, 0.301714, 0.839755, 0.158619, 0.488187, 0.839755, -0.415278, 0.301714, 0.839755, -0.256661, 0.789905, 0.522512, 0.158619, 0.488187, 0.839755, -0.415278, 0.301714, 0.839755, -0.706518, 0.513309, 0.445848, -0.256661, 0.789905, 0.522512, -2.15973e-08, -1.18994e-10, 0.985574, -0.415278, -0.301714, 0.839755, -0.415278, 0.301714, 0.839755, -0.415278, -0.301714, 0.839755, -0.830558, -1.18994e-10, 0.52251, -0.415278, 0.301714, 0.839755, -0.415278, -0.301714, 0.839755, -0.706518, -0.513309, 0.445848, -0.830558, -1.18994e-10, 0.52251, -2.15973e-08, -1.18994e-10, 0.985574, 0.158619, -0.488187, 0.839755, -0.415278, -0.301714, 0.839755, 0.158619, -0.488187, 0.839755, -0.256661, -0.789905, 0.522512, -0.415278, -0.301714, 0.839755, 0.158619, -0.488187, 0.839755, 0.269861, -0.83056, 0.445849, -0.256661, -0.789905, 0.522512, -2.15973e-08, -1.18994e-10, 0.985574, 0.513314, -1.18994e-10, 0.839753, 0.158619, -0.488187, 0.839755, 0.513314, -1.18994e-10, 0.839753, 0.671937, -0.488189, 0.522511, 0.158619, -0.488187, 0.839755, 0.513314, -1.18994e-10, 0.839753, 0.873303, -1.18994e-10, 0.445844, 0.671937, -0.488189, 0.522511, 0.873303, -1.18994e-10, 0.445844, 0.671937, 0.488189, 0.522511, 0.928597, 0.301715, 0.00919056, 0.671937, 0.488189, 0.522511, 0.573904, 0.78991, 0.00919056, 0.928597, 0.301715, 0.00919056, 0.671937, 0.488189, 0.522511, 0.269861, 0.83056, 0.445849, 0.573904, 0.78991, 0.00919056, 0.269861, 0.83056, 0.445849, -0.256661, 0.789905, 0.522512, -2.15973e-08, 0.976383, 0.00919056, -0.256661, 0.789905, 0.522512, -0.573904, 0.78991, 0.00919056, -2.15973e-08, 0.976383, 0.00919056, -0.256661, 0.789905, 0.522512, -0.706518, 0.513309, 0.445848, -0.573904, 0.78991, 0.00919056, -0.706518, 0.513309, 0.445848, -0.830558, -1.18994e-10, 0.52251, -0.928597, 0.301715, 0.00919056, -0.830558, -1.18994e-10, 0.52251, -0.928597, -0.301715, 0.00919056, -0.928597, 0.301715, 0.00919056, -0.830558, -1.18994e-10, 0.52251, -0.706518, -0.513309, 0.445848, -0.928597, -0.301715, 0.00919056, -0.706518, -0.513309, 0.445848, -0.256661, -0.789905, 0.522512, -0.573904, -0.78991, 0.00919056, -0.256661, -0.789905, 0.522512, -2.15973e-08, -0.976383, 0.00919056, -0.573904, -0.78991, 0.00919056, -0.256661, -0.789905, 0.522512, 0.269861, -0.83056, 0.445849, -2.15973e-08, -0.976383, 0.00919056, 0.269861, -0.83056, 0.445849, 0.671937, -0.488189, 0.522511, 0.573904, -0.78991, 0.00919056, 0.671937, -0.488189, 0.522511, 0.928597, -0.301715, 0.00919056, 0.573904, -0.78991, 0.00919056, 0.671937, -0.488189, 0.522511, 0.873303, -1.18994e-10, 0.445844, 0.928597, -0.301715, 0.00919056, 0.269861, 0.83056, 0.445849, -2.15973e-08, 0.976383, 0.00919056, 0.573904, 0.78991, 0.00919056, -0.706518, 0.513309, 0.445848, -0.928597, 0.301715, 0.00919056, -0.573904, 0.78991, 0.00919056, -0.706518, -0.513309, 0.445848, -0.573904, -0.78991, 0.00919056, -0.928597, -0.301715, 0.00919056, 0.269861, -0.83056, 0.445849, 0.573904, -0.78991, 0.00919056, -2.15973e-08, -0.976383, 0.00919056, 0.873303, -1.18994e-10, 0.445844, 0.928597, 0.301715, 0.00919056, 0.928597, -0.301715, 0.00919056 )

[sub_resource type="Shader" id=8]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.5441176295280457);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.1617647111415863);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/texture_0 = ExtResource( 3 )

[sub_resource type="ArrayMesh" id=10]
resource_name = "Icosphere"
surfaces/0 = {
"aabb": AABB( -0.928597, 0.00919056, -0.976383, 1.85719, 0.976383, 1.95277 ),
"array_data": PoolByteArray( 57, 43, 138, 62, 82, 70, 228, 62, 149, 159, 84, 63, 35, 56, 108, 0, 136, 0, 39, 129, 139, 58, 123, 57, 16, 4, 44, 63, 72, 195, 5, 63, 233, 243, 249, 62, 87, 66, 63, 0, 182, 0, 102, 129, 209, 57, 123, 57, 5, 109, 34, 62, 47, 250, 86, 63, 165, 243, 249, 62, 20, 108, 63, 0, 167, 224, 84, 129, 46, 58, 217, 56, 93, 222, 52, 191, 48, 70, 228, 62, 56, 104, 3, 63, 165, 56, 66, 0, 171, 221, 169, 129, 0, 60, 123, 57, 18, 105, 131, 190, 89, 195, 5, 63, 55, 55, 74, 63, 223, 66, 102, 0, 136, 0, 217, 129, 69, 59, 123, 57, 81, 159, 212, 190, 47, 250, 86, 63, 66, 122, 154, 62, 202, 108, 39, 0, 149, 224, 197, 129, 162, 59, 217, 56, 93, 222, 52, 191, 48, 70, 228, 62, 56, 104, 3, 191, 165, 56, 190, 0, 74, 0, 154, 129, 93, 52, 123, 57, 115, 159, 84, 191, 55, 195, 5, 63, 213, 213, 2, 47, 148, 66, 0, 0, 0, 0, 129, 129, 209, 49, 123, 57, 81, 159, 212, 190, 47, 250, 86, 63, 66, 122, 154, 190, 202, 108, 217, 0, 22, 224, 136, 129, 69, 51, 217, 56, 57, 43, 138, 62, 82, 70, 228, 62, 149, 159, 84, 191, 35, 56, 148, 0, 120, 0, 39, 129, 69, 55, 123, 57, 18, 105, 131, 190, 89, 195, 5, 63, 55, 55, 74, 191, 223, 66, 154, 0, 120, 0, 217, 129, 209, 53, 123, 57, 5, 109, 34, 62, 47, 250, 86, 63, 165, 243, 249, 190, 20, 108, 193, 0, 121, 224, 241, 129, 139, 54, 217, 56, 201, 144, 95, 63, 170, 69, 228, 62, 213, 213, 2, 47, 113, 56, 0, 0, 0, 0, 127, 129, 23, 57, 123, 57, 16, 4, 44, 63, 72, 195, 5, 63, 233, 243, 249, 190, 87, 66, 193, 0, 74, 0, 102, 129, 93, 56, 123, 57, 140, 104, 3, 63, 13, 250, 86, 63, 213, 213, 2, 47, 66, 108, 0, 0, 52, 224, 111, 129, 186, 56, 217, 56, 5, 109, 34, 62, 47, 250, 86, 63, 165, 243, 249, 190, 20, 108, 193, 0, 89, 32, 84, 129, 0, 56, 217, 56, 247, 132, 185, 178, 148, 78, 124, 63, 213, 213, 2, 47, 0, 127, 0, 0, 74, 0, 102, 129, 93, 56, 56, 56, 81, 159, 212, 190, 47, 250, 86, 63, 66, 122, 154, 190, 202, 108, 217, 0, 107, 32, 197, 129, 23, 53, 217, 56, 247, 132, 185, 178, 148, 78, 124, 63, 213, 213, 2, 47, 0, 127, 0, 0, 120, 0, 217, 129, 209, 53, 56, 56, 81, 159, 212, 190, 47, 250, 86, 63, 66, 122, 154, 62, 202, 108, 39, 0, 234, 32, 136, 129, 93, 48, 217, 56, 247, 132, 185, 178, 148, 78, 124, 63, 213, 213, 2, 47, 0, 127, 0, 0, 0, 0, 129, 129, 209, 49, 56, 56, 93, 222, 52, 191, 48, 70, 228, 62, 56, 104, 3, 63, 165, 56, 66, 0, 193, 23, 149, 129, 209, 45, 123, 57, 5, 109, 34, 62, 47, 250, 86, 63, 165, 243, 249, 62, 20, 108, 63, 0, 135, 32, 241, 129, 232, 58, 217, 56, 247, 132, 185, 178, 148, 78, 124, 63, 213, 213, 2, 47, 0, 127, 0, 0, 136, 0, 217, 129, 69, 59, 56, 56, 140, 104, 3, 63, 13, 250, 86, 63, 213, 213, 2, 47, 66, 108, 0, 0, 204, 32, 111, 129, 116, 57, 217, 56, 247, 132, 185, 178, 148, 78, 124, 63, 213, 213, 2, 47, 0, 127, 0, 0, 182, 0, 102, 129, 209, 57, 56, 56, 136, 184, 109, 63, 1, 148, 22, 60, 99, 122, 154, 190, 117, 28, 216, 0, 42, 250, 119, 129, 186, 56, 28, 58, 95, 235, 18, 63, 1, 148, 22, 60, 139, 55, 74, 191, 74, 28, 157, 0, 100, 6, 77, 129, 0, 56, 28, 58, 247, 132, 185, 178, 1, 148, 22, 60, 60, 244, 121, 191, 255, 28, 133, 0, 126, 250, 253, 129, 139, 54, 28, 58, 95, 235, 18, 191, 1, 148, 22, 60, 139, 55, 74, 191, 185, 28, 155, 0, 104, 6, 185, 129, 23, 53, 28, 58, 136, 184, 109, 191, 1, 148, 22, 60, 99, 122, 154, 190, 138, 28, 220, 0, 35, 250, 135, 129, 69, 51, 28, 58, 136, 184, 109, 191, 1, 148, 22, 60, 99, 122, 154, 62, 138, 28, 36, 0, 221, 6, 135, 129, 93, 48, 28, 58, 95, 235, 18, 191, 1, 148, 22, 60, 139, 55, 74, 63, 185, 28, 101, 0, 151, 243, 186, 129, 162, 59, 28, 58, 247, 132, 185, 178, 1, 148, 22, 60, 60, 244, 121, 63, 255, 28, 123, 0, 130, 6, 253, 129, 232, 58, 28, 58, 95, 235, 18, 63, 1, 148, 22, 60, 139, 55, 74, 63, 74, 28, 99, 0, 156, 250, 77, 129, 46, 58, 28, 58, 136, 184, 109, 63, 1, 148, 22, 60, 99, 122, 154, 62, 117, 28, 40, 0, 214, 6, 119, 129, 116, 57, 28, 58, 95, 235, 18, 191, 1, 148, 22, 60, 139, 55, 74, 63, 185, 28, 101, 0, 154, 9, 182, 129, 209, 41, 28, 58 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 3, 0, 5, 0, 4, 0, 6, 0, 8, 0, 7, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 14, 0, 16, 0, 15, 0, 14, 0, 15, 0, 13, 0, 13, 0, 15, 0, 9, 0, 11, 0, 18, 0, 17, 0, 11, 0, 17, 0, 10, 0, 10, 0, 17, 0, 6, 0, 8, 0, 20, 0, 19, 0, 8, 0, 19, 0, 7, 0, 7, 0, 19, 0, 21, 0, 5, 0, 23, 0, 22, 0, 5, 0, 22, 0, 4, 0, 4, 0, 22, 0, 0, 0, 2, 0, 25, 0, 24, 0, 2, 0, 24, 0, 1, 0, 1, 0, 24, 0, 12, 0, 26, 0, 12, 0, 13, 0, 26, 0, 13, 0, 27, 0, 27, 0, 13, 0, 9, 0, 28, 0, 9, 0, 10, 0, 28, 0, 10, 0, 29, 0, 29, 0, 10, 0, 6, 0, 30, 0, 6, 0, 7, 0, 30, 0, 7, 0, 31, 0, 31, 0, 7, 0, 21, 0, 32, 0, 3, 0, 4, 0, 32, 0, 4, 0, 33, 0, 33, 0, 4, 0, 0, 0, 34, 0, 0, 0, 1, 0, 34, 0, 1, 0, 35, 0, 35, 0, 1, 0, 12, 0, 27, 0, 9, 0, 28, 0, 29, 0, 6, 0, 30, 0, 31, 0, 21, 0, 36, 0, 33, 0, 0, 0, 34, 0, 35, 0, 12, 0, 26, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 120,
"material": SubResource( 9 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 37
}

[sub_resource type="PhysicsMaterial" id=11]
resource_name = "Cylinder001PhysicsMaterial"
friction = 0.5

[sub_resource type="ConcavePolygonShape" id=12]
resource_name = "Cylinder001"
data = PoolVector3Array( -2.07201, 0.860203, 1.1932, -2.07571, 1.37966, 0.114544, -0.0757205, 1, 0.107678, -0.0730366, 0.62349, 0.889505, -2.07201, 0.860203, 1.1932, -0.0757205, 1, 0.107678, -2.07109, -0.307003, 1.4596, -2.07201, 0.860203, 1.1932, -0.0730366, 0.62349, 0.889505, -0.0723737, -0.222521, 1.0826, -2.07109, -0.307003, 1.4596, -0.0730366, 0.62349, 0.889505, -2.07365, -1.24303, 0.713151, -2.07109, -0.307003, 1.4596, -0.0723737, -0.222521, 1.0826, -0.074231, -0.900969, 0.54156, -2.07365, -1.24303, 0.713151, -0.0723737, -0.222521, 1.0826, -2.07776, -1.24303, -0.484064, -2.07365, -1.24303, 0.713151, -0.074231, -0.900969, 0.54156, -0.0772099, -0.900969, -0.326203, -2.07776, -1.24303, -0.484064, -0.074231, -0.900969, 0.54156, -2.08033, -0.307003, -1.23052, -2.07776, -1.24303, -0.484064, -0.0772099, -0.900969, -0.326203, -0.0790672, -0.222521, -0.867244, -2.08033, -0.307003, -1.23052, -0.0772099, -0.900969, -0.326203, -1.75597, -0.730891, -0.238534, -2.07726, -0.937803, -0.337075, -2.07919, -0.231618, -0.900235, -1.75747, -0.180515, -0.677442, -1.75597, -0.730891, -0.238534, -2.07919, -0.231618, -0.900235, -2.07941, 0.860203, -0.96411, -2.08033, -0.307003, -1.23052, -0.0790672, -0.222521, -0.867244, -0.0784043, 0.62349, -0.674149, -2.07941, 0.860203, -0.96411, -0.0790672, -0.222521, -0.867244, -2.07571, 1.37966, 0.114544, -2.07941, 0.860203, -0.96411, -0.0784043, 0.62349, -0.674149, -0.0757205, 1, 0.107678, -2.07571, 1.37966, 0.114544, -0.0784043, 0.62349, -0.674149, 1.36775, -0.222521, -0.87221, -0.0790672, -0.222521, -0.867244, -0.0772099, -0.900969, -0.326203, 1.36961, -0.900969, -0.331169, 1.36775, -0.222521, -0.87221, -0.0772099, -0.900969, -0.326203, -2.07201, 0.860203, 1.1932, -2.07291, 0.64898, 0.928334, -2.07571, 1.04088, 0.114544, -2.07571, 1.37966, 0.114544, -2.07201, 0.860203, 1.1932, -2.07571, 1.04088, 0.114544, -2.07109, -0.307003, 1.4596, -2.07222, -0.231618, 1.12932, -2.07291, 0.64898, 0.928334, -2.07201, 0.860203, 1.1932, -2.07109, -0.307003, 1.4596, -2.07291, 0.64898, 0.928334, -2.07365, -1.24303, 0.713151, -2.07416, -0.937803, 0.566163, -2.07222, -0.231618, 1.12932, -2.07109, -0.307003, 1.4596, -2.07365, -1.24303, 0.713151, -2.07222, -0.231618, 1.12932, -2.07776, -1.24303, -0.484064, -2.07726, -0.937803, -0.337075, -2.07416, -0.937803, 0.566163, -2.07365, -1.24303, 0.713151, -2.07776, -1.24303, -0.484064, -2.07416, -0.937803, 0.566163, -2.08033, -0.307003, -1.23052, -2.07919, -0.231618, -0.900235, -2.07726, -0.937803, -0.337075, -2.07776, -1.24303, -0.484064, -2.08033, -0.307003, -1.23052, -2.07726, -0.937803, -0.337075, -2.07941, 0.860203, -0.96411, -2.0785, 0.64898, -0.699246, -2.07919, -0.231618, -0.900235, -2.08033, -0.307003, -1.23052, -2.07941, 0.860203, -0.96411, -2.07919, -0.231618, -0.900235, -2.07571, 1.37966, 0.114544, -2.07571, 1.04088, 0.114544, -2.0785, 0.64898, -0.699246, -2.07941, 0.860203, -0.96411, -2.07571, 1.37966, 0.114544, -2.0785, 0.64898, -0.699246, -1.75476, 0.594356, 0.113442, -1.75316, 0.370575, 0.578126, -1.75277, -0.132257, 0.692893, -1.75675, -0.132257, -0.466009, -1.75635, 0.370575, -0.351241, -1.75476, 0.594356, 0.113442, -1.75387, -0.535496, 0.371322, -1.75564, -0.535496, -0.144438, -1.75675, -0.132257, -0.466009, -1.75476, 0.594356, 0.113442, -1.75277, -0.132257, 0.692893, -1.75387, -0.535496, 0.371322, -1.75387, -0.535496, 0.371322, -1.75675, -0.132257, -0.466009, -1.75476, 0.594356, 0.113442, -1.75204, -0.180515, 0.904326, -2.07222, -0.231618, 1.12932, -2.07416, -0.937803, 0.566163, -1.75355, -0.730891, 0.465419, -1.75204, -0.180515, 0.904326, -2.07416, -0.937803, 0.566163, -1.75476, 0.811228, 0.113442, -2.07571, 1.04088, 0.114544, -2.07291, 0.64898, 0.928334, -1.75258, 0.505792, 0.747682, -1.75476, 0.811228, 0.113442, -2.07291, 0.64898, 0.928334, -1.75747, -0.180515, -0.677442, -2.07919, -0.231618, -0.900235, -2.0785, 0.64898, -0.699246, -1.75693, 0.505792, -0.520797, -1.75747, -0.180515, -0.677442, -2.0785, 0.64898, -0.699246, -1.75355, -0.730891, 0.465419, -2.07416, -0.937803, 0.566163, -2.07726, -0.937803, -0.337075, -1.75597, -0.730891, -0.238534, -1.75355, -0.730891, 0.465419, -2.07726, -0.937803, -0.337075, -1.75258, 0.505792, 0.747682, -2.07291, 0.64898, 0.928334, -2.07222, -0.231618, 1.12932, -1.75204, -0.180515, 0.904326, -1.75258, 0.505792, 0.747682, -2.07222, -0.231618, 1.12932, -1.75693, 0.505792, -0.520797, -2.0785, 0.64898, -0.699246, -2.07571, 1.04088, 0.114544, -1.75476, 0.811228, 0.113442, -1.75693, 0.505792, -0.520797, -2.07571, 1.04088, 0.114544, 1.37378, 0.62349, 0.884539, 1.3711, 1, 0.102712, 1.36841, 0.62349, -0.679115, 1.37259, -0.900969, 0.536593, 1.37444, -0.222521, 1.07763, 1.37378, 0.62349, 0.884539, 1.36775, -0.222521, -0.87221, 1.36961, -0.900969, -0.331169, 1.37259, -0.900969, 0.536593, 1.37378, 0.62349, 0.884539, 1.36841, 0.62349, -0.679115, 1.36775, -0.222521, -0.87221, 1.36775, -0.222521, -0.87221, 1.37259, -0.900969, 0.536593, 1.37378, 0.62349, 0.884539, 1.37378, 0.62349, 0.884539, -0.0730366, 0.62349, 0.889505, -0.0757205, 1, 0.107678, 1.3711, 1, 0.102712, 1.37378, 0.62349, 0.884539, -0.0757205, 1, 0.107678, 1.37259, -0.900969, 0.536593, -0.074231, -0.900969, 0.54156, -0.0723737, -0.222521, 1.0826, 1.37444, -0.222521, 1.07763, 1.37259, -0.900969, 0.536593, -0.0723737, -0.222521, 1.0826, 1.36841, 0.62349, -0.679115, -0.0784043, 0.62349, -0.674149, -0.0790672, -0.222521, -0.867244, 1.36775, -0.222521, -0.87221, 1.36841, 0.62349, -0.679115, -0.0790672, -0.222521, -0.867244, 1.36961, -0.900969, -0.331169, -0.0772099, -0.900969, -0.326203, -0.074231, -0.900969, 0.54156, 1.37259, -0.900969, 0.536593, 1.36961, -0.900969, -0.331169, -0.074231, -0.900969, 0.54156, 1.3711, 1, 0.102712, -0.0757205, 1, 0.107678, -0.0784043, 0.62349, -0.674149, 1.36841, 0.62349, -0.679115, 1.3711, 1, 0.102712, -0.0784043, 0.62349, -0.674149, 1.37444, -0.222521, 1.07763, -0.0723737, -0.222521, 1.0826, -0.0730366, 0.62349, 0.889505, 1.37378, 0.62349, 0.884539, 1.37444, -0.222521, 1.07763, -0.0730366, 0.62349, 0.889505, -1.75258, 0.505792, 0.747682, -1.75316, 0.370575, 0.578126, -1.75476, 0.594356, 0.113442, -1.75476, 0.811228, 0.113442, -1.75258, 0.505792, 0.747682, -1.75476, 0.594356, 0.113442, -1.75204, -0.180515, 0.904326, -1.75277, -0.132257, 0.692893, -1.75316, 0.370575, 0.578126, -1.75258, 0.505792, 0.747682, -1.75204, -0.180515, 0.904326, -1.75316, 0.370575, 0.578126, -1.75355, -0.730891, 0.465419, -1.75387, -0.535496, 0.371322, -1.75277, -0.132257, 0.692893, -1.75204, -0.180515, 0.904326, -1.75355, -0.730891, 0.465419, -1.75277, -0.132257, 0.692893, -1.75597, -0.730891, -0.238534, -1.75564, -0.535496, -0.144438, -1.75387, -0.535496, 0.371322, -1.75355, -0.730891, 0.465419, -1.75597, -0.730891, -0.238534, -1.75387, -0.535496, 0.371322, -1.75747, -0.180515, -0.677442, -1.75675, -0.132257, -0.466009, -1.75564, -0.535496, -0.144438, -1.75597, -0.730891, -0.238534, -1.75747, -0.180515, -0.677442, -1.75564, -0.535496, -0.144438, -1.75693, 0.505792, -0.520797, -1.75635, 0.370575, -0.351241, -1.75675, -0.132257, -0.466009, -1.75747, -0.180515, -0.677442, -1.75693, 0.505792, -0.520797, -1.75675, -0.132257, -0.466009, -1.75476, 0.811228, 0.113442, -1.75476, 0.594356, 0.113442, -1.75635, 0.370575, -0.351241, -1.75693, 0.505792, -0.520797, -1.75476, 0.811228, 0.113442, -1.75635, 0.370575, -0.351241 )

[sub_resource type="Shader" id=13]
resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.5);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_emissionstrength = float(1.0);
	float node1_in19_alpha = float(1.0);
	vec3 node1_in20_normal = NORMAL;
	vec3 node1_in21_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in22_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in20_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in22_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/texture_0 = ExtResource( 2 )

[sub_resource type="ArrayMesh" id=15]
resource_name = "Cylinder001"
surfaces/0 = {
"aabb": AABB( -2.08033, -1.23052, -1.37966, 3.45477, 2.69012, 2.62269 ),
"array_data": PoolByteArray( 89, 19, 155, 189, 73, 134, 220, 61, 0, 0, 128, 191, 12, 0, 130, 0, 250, 130, 0, 127, 0, 60, 0, 56, 111, 216, 4, 192, 11, 150, 234, 61, 179, 152, 176, 191, 187, 0, 150, 0, 26, 134, 239, 127, 0, 60, 0, 0, 208, 155, 4, 192, 199, 186, 152, 63, 68, 54, 92, 191, 187, 83, 190, 0, 0, 177, 157, 127, 219, 58, 0, 0, 55, 148, 149, 189, 154, 182, 99, 63, 10, 157, 31, 191, 12, 98, 178, 0, 0, 177, 157, 127, 219, 58, 0, 56, 189, 140, 4, 192, 44, 212, 186, 63, 127, 47, 157, 62, 187, 103, 23, 0, 0, 28, 133, 127, 182, 57, 0, 0, 170, 56, 148, 189, 163, 146, 138, 63, 140, 220, 99, 62, 12, 123, 28, 0, 0, 28, 133, 127, 182, 57, 0, 56, 174, 182, 4, 192, 16, 145, 54, 63, 155, 27, 159, 63, 187, 46, 95, 0, 0, 114, 201, 127, 146, 56, 0, 0, 108, 6, 152, 189, 173, 163, 10, 63, 232, 165, 102, 63, 12, 54, 113, 0, 0, 114, 201, 127, 146, 56, 0, 56, 5, 250, 4, 192, 61, 215, 247, 190, 155, 27, 159, 63, 187, 211, 95, 0, 0, 114, 55, 127, 219, 54, 0, 0, 57, 32, 158, 189, 20, 4, 167, 190, 232, 165, 102, 63, 12, 202, 113, 0, 0, 114, 55, 127, 219, 54, 0, 56, 32, 36, 5, 192, 174, 129, 157, 191, 127, 47, 157, 62, 186, 153, 23, 0, 0, 28, 123, 127, 146, 52, 0, 0, 252, 237, 161, 189, 180, 3, 94, 191, 140, 220, 99, 62, 11, 133, 28, 0, 0, 28, 123, 127, 146, 52, 0, 56, 115, 17, 5, 192, 205, 117, 102, 191, 69, 45, 109, 62, 137, 42, 247, 0, 42, 119, 3, 127, 179, 44, 82, 58, 212, 241, 4, 192, 24, 149, 172, 190, 219, 19, 112, 63, 137, 19, 217, 0, 18, 125, 5, 127, 124, 49, 78, 59, 160, 195, 224, 191, 66, 66, 116, 190, 172, 27, 59, 63, 150, 30, 194, 0, 26, 123, 15, 127, 124, 49, 78, 59, 199, 244, 224, 191, 215, 108, 45, 191, 237, 216, 56, 62, 150, 68, 241, 0, 67, 107, 9, 127, 179, 44, 82, 58, 14, 21, 5, 192, 234, 207, 118, 191, 68, 54, 92, 191, 186, 174, 190, 0, 0, 177, 99, 127, 146, 48, 0, 0, 111, 146, 160, 189, 7, 149, 44, 191, 10, 157, 31, 191, 11, 158, 178, 0, 0, 177, 99, 127, 146, 48, 0, 56, 111, 216, 4, 192, 11, 150, 234, 61, 179, 152, 176, 191, 187, 0, 150, 0, 229, 134, 17, 127, 0, 0, 0, 0, 89, 19, 155, 189, 73, 134, 220, 61, 0, 0, 128, 191, 12, 0, 130, 0, 5, 130, 0, 127, 0, 0, 0, 56, 111, 18, 175, 63, 40, 73, 95, 191, 140, 220, 99, 62, 78, 159, 22, 0, 127, 0, 0, 129, 146, 52, 0, 56, 97, 79, 175, 63, 252, 142, 169, 190, 232, 165, 102, 63, 78, 213, 89, 0, 127, 0, 0, 129, 219, 54, 0, 56, 111, 216, 4, 192, 11, 150, 234, 61, 142, 59, 133, 191, 137, 0, 43, 0, 0, 126, 0, 127, 0, 52, 141, 56, 143, 170, 4, 192, 76, 167, 109, 63, 142, 35, 38, 191, 137, 223, 27, 0, 224, 122, 7, 127, 67, 54, 24, 57, 208, 155, 4, 192, 199, 186, 152, 63, 68, 54, 92, 191, 187, 83, 190, 0, 60, 95, 57, 127, 0, 55, 205, 56, 111, 216, 4, 192, 11, 150, 234, 61, 179, 152, 176, 191, 187, 0, 150, 0, 0, 126, 0, 127, 0, 52, 20, 56, 65, 159, 4, 192, 143, 141, 144, 63, 69, 45, 109, 62, 137, 215, 247, 0, 215, 119, 253, 127, 211, 54, 82, 58, 189, 140, 4, 192, 44, 212, 186, 63, 127, 47, 157, 62, 187, 103, 23, 0, 98, 73, 223, 127, 190, 55, 109, 58, 10, 191, 4, 192, 15, 240, 16, 63, 219, 19, 112, 63, 137, 238, 217, 0, 239, 125, 251, 127, 65, 53, 78, 59, 174, 182, 4, 192, 16, 145, 54, 63, 155, 27, 159, 63, 187, 46, 95, 0, 27, 118, 219, 127, 170, 53, 186, 59, 5, 250, 4, 192, 61, 215, 247, 190, 155, 27, 159, 63, 187, 211, 95, 0, 230, 118, 37, 127, 170, 48, 186, 59, 32, 36, 5, 192, 174, 129, 157, 191, 127, 47, 157, 62, 186, 153, 23, 0, 159, 74, 33, 127, 25, 36, 109, 58, 37, 6, 5, 192, 201, 1, 51, 191, 142, 35, 38, 191, 137, 34, 27, 0, 33, 122, 249, 127, 240, 46, 24, 57, 14, 21, 5, 192, 234, 207, 118, 191, 68, 54, 92, 191, 186, 174, 190, 0, 197, 96, 199, 127, 251, 43, 205, 56, 250, 155, 224, 191, 71, 84, 232, 61, 183, 39, 24, 191, 130, 0, 0, 0, 0, 126, 0, 127, 0, 52, 240, 56, 47, 221, 224, 191, 187, 152, 238, 190, 97, 110, 7, 62, 130, 0, 0, 0, 0, 126, 0, 127, 184, 47, 60, 58, 208, 126, 224, 191, 235, 29, 190, 62, 68, 22, 9, 63, 130, 0, 0, 0, 0, 126, 0, 127, 235, 52, 244, 58, 217, 66, 224, 191, 233, 129, 103, 63, 237, 216, 56, 62, 150, 189, 241, 0, 190, 107, 247, 127, 211, 54, 82, 58, 84, 116, 224, 191, 102, 75, 238, 62, 172, 27, 59, 63, 150, 227, 194, 0, 231, 123, 241, 127, 65, 53, 78, 59, 250, 155, 224, 191, 71, 84, 232, 61, 163, 172, 79, 191, 150, 0, 69, 0, 0, 126, 0, 127, 0, 52, 141, 56, 139, 84, 224, 191, 22, 104, 63, 63, 150, 123, 1, 191, 150, 202, 43, 0, 207, 114, 20, 127, 67, 54, 24, 57, 21, 227, 224, 191, 244, 82, 5, 191, 150, 123, 1, 191, 150, 54, 43, 0, 50, 114, 236, 127, 240, 46, 24, 57, 6, 216, 175, 63, 38, 113, 98, 63, 10, 157, 31, 191, 79, 77, 194, 0, 196, 100, 48, 129, 128, 59, 205, 56, 7, 177, 175, 63, 41, 94, 9, 63, 232, 165, 102, 63, 79, 42, 89, 0, 228, 119, 224, 129, 213, 58, 186, 59, 111, 18, 175, 63, 40, 73, 95, 191, 140, 220, 99, 62, 78, 159, 22, 0, 93, 81, 26, 129, 32, 56, 109, 58, 6, 216, 175, 63, 38, 113, 98, 63, 10, 157, 31, 191, 79, 77, 194, 0, 127, 0, 0, 129, 219, 58, 0, 56, 52, 128, 175, 63, 171, 90, 210, 61, 0, 0, 128, 191, 78, 0, 157, 0, 127, 0, 0, 129, 0, 60, 0, 56, 7, 177, 175, 63, 41, 94, 9, 63, 232, 165, 102, 63, 79, 42, 89, 0, 127, 0, 0, 129, 146, 56, 0, 56, 166, 237, 175, 63, 200, 239, 137, 63, 140, 220, 99, 62, 79, 96, 22, 0, 127, 0, 0, 129, 182, 57, 0, 56, 15, 40, 175, 63, 123, 218, 45, 191, 10, 157, 31, 191, 78, 178, 194, 0, 127, 0, 0, 129, 146, 48, 0, 56, 52, 128, 175, 63, 171, 90, 210, 61, 0, 0, 128, 191, 78, 0, 157, 0, 127, 0, 0, 129, 0, 0, 0, 56, 140, 103, 224, 191, 17, 0, 20, 63, 2, 188, 189, 190, 130, 0, 0, 0, 0, 126, 0, 127, 168, 53, 86, 57, 196, 90, 224, 191, 112, 97, 49, 63, 97, 110, 7, 62, 130, 0, 0, 0, 0, 126, 0, 127, 17, 54, 60, 58, 208, 184, 224, 191, 142, 231, 19, 190, 68, 22, 9, 63, 130, 0, 0, 0, 0, 126, 0, 127, 40, 50, 244, 58, 20, 208, 224, 191, 220, 213, 179, 190, 2, 188, 189, 190, 130, 0, 0, 0, 0, 126, 0, 127, 174, 48, 86, 57, 15, 40, 175, 63, 123, 218, 45, 191, 10, 157, 31, 191, 78, 178, 194, 0, 61, 100, 208, 129, 127, 56, 205, 56, 52, 128, 175, 63, 171, 90, 210, 61, 0, 0, 128, 191, 78, 0, 157, 0, 0, 126, 0, 129, 0, 58, 20, 56, 166, 237, 175, 63, 200, 239, 137, 63, 140, 220, 99, 62, 79, 96, 22, 0, 163, 82, 230, 129, 223, 59, 109, 58, 97, 79, 175, 63, 252, 142, 169, 190, 232, 165, 102, 63, 78, 213, 89, 0, 28, 119, 32, 129, 42, 57, 186, 59 ),
"array_index_data": PoolByteArray( 0, 0, 2, 0, 1, 0, 0, 0, 3, 0, 2, 0, 3, 0, 4, 0, 2, 0, 3, 0, 5, 0, 4, 0, 5, 0, 6, 0, 4, 0, 5, 0, 7, 0, 6, 0, 7, 0, 8, 0, 6, 0, 7, 0, 9, 0, 8, 0, 9, 0, 10, 0, 8, 0, 9, 0, 11, 0, 10, 0, 12, 0, 14, 0, 13, 0, 12, 0, 15, 0, 14, 0, 11, 0, 16, 0, 10, 0, 11, 0, 17, 0, 16, 0, 17, 0, 18, 0, 16, 0, 17, 0, 19, 0, 18, 0, 9, 0, 20, 0, 11, 0, 9, 0, 21, 0, 20, 0, 22, 0, 24, 0, 23, 0, 22, 0, 25, 0, 24, 0, 23, 0, 27, 0, 26, 0, 23, 0, 24, 0, 27, 0, 26, 0, 29, 0, 28, 0, 26, 0, 27, 0, 29, 0, 28, 0, 30, 0, 13, 0, 28, 0, 29, 0, 30, 0, 13, 0, 31, 0, 12, 0, 13, 0, 30, 0, 31, 0, 12, 0, 33, 0, 32, 0, 12, 0, 31, 0, 33, 0, 32, 0, 25, 0, 22, 0, 32, 0, 33, 0, 25, 0, 34, 0, 36, 0, 35, 0, 28, 0, 37, 0, 26, 0, 28, 0, 38, 0, 37, 0, 23, 0, 39, 0, 22, 0, 23, 0, 40, 0, 39, 0, 32, 0, 15, 0, 12, 0, 32, 0, 41, 0, 15, 0, 13, 0, 38, 0, 28, 0, 13, 0, 14, 0, 38, 0, 26, 0, 40, 0, 23, 0, 26, 0, 37, 0, 40, 0, 22, 0, 41, 0, 32, 0, 22, 0, 39, 0, 41, 0, 42, 0, 44, 0, 43, 0, 0, 0, 45, 0, 3, 0, 0, 0, 46, 0, 45, 0, 5, 0, 47, 0, 7, 0, 5, 0, 48, 0, 47, 0, 11, 0, 49, 0, 17, 0, 11, 0, 20, 0, 49, 0, 7, 0, 21, 0, 9, 0, 7, 0, 47, 0, 21, 0, 17, 0, 50, 0, 19, 0, 17, 0, 49, 0, 50, 0, 3, 0, 48, 0, 5, 0, 3, 0, 45, 0, 48, 0, 34, 0, 40, 0, 51, 0, 34, 0, 39, 0, 40, 0, 51, 0, 37, 0, 52, 0, 51, 0, 40, 0, 37, 0, 52, 0, 38, 0, 36, 0, 52, 0, 37, 0, 38, 0, 36, 0, 14, 0, 53, 0, 36, 0, 38, 0, 14, 0, 53, 0, 15, 0, 35, 0, 53, 0, 14, 0, 15, 0, 35, 0, 41, 0, 54, 0, 35, 0, 15, 0, 41, 0, 54, 0, 39, 0, 34, 0, 54, 0, 41, 0, 39, 0, 52, 0, 34, 0, 51, 0, 34, 0, 35, 0, 54, 0, 35, 0, 36, 0, 53, 0, 36, 0, 34, 0, 52, 0, 55, 0, 42, 0, 56, 0, 42, 0, 43, 0, 57, 0, 43, 0, 44, 0, 58, 0, 44, 0, 42, 0, 55, 0 ),
"blend_shape_data": [  ],
"format": 97559,
"index_count": 240,
"material": SubResource( 14 ),
"primitive": 4,
"skeleton_aabb": [  ],
"vertex_count": 59
}

[node name="brokePlate" type="Spatial"]

[node name="CylinderPhysics" type="StaticBody" parent="."]
transform = Transform( 0.593372, 0, 0, 0, 0.0975217, 0, 0, 0, 0.593372, 0.0104905, -0.0369626, 0.126581 )
physics_material_override = SubResource( 1 )

[node name="CylinderCollision" type="CollisionShape" parent="CylinderPhysics"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 2 )

[node name="Cylinder" type="MeshInstance" parent="CylinderPhysics/CylinderCollision"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 5 )
material/0 = null

[node name="IcospherePhysics" type="StaticBody" parent="."]
transform = Transform( 0.539957, 0, 0, 0, 0.539957, 0, 0, 0, 0.539957, 0.0104905, -0.0369626, 0.126581 )
physics_material_override = SubResource( 6 )

[node name="IcosphereCollision" type="CollisionShape" parent="IcospherePhysics"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 7 )

[node name="Icosphere" type="MeshInstance" parent="IcospherePhysics/IcosphereCollision"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 10 )
material/0 = null

[node name="Cylinder001Physics" type="StaticBody" parent="."]
transform = Transform( 0.0704831, 0.0226546, 0, -0.0226546, 0.0704831, 0, 0, 0, 0.0740344, -0.393492, 0.164264, 0.12741 )
physics_material_override = SubResource( 11 )

[node name="Cylinder001Collision" type="CollisionShape" parent="Cylinder001Physics"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0, 0 )
shape = SubResource( 12 )

[node name="Cylinder001" type="MeshInstance" parent="Cylinder001Physics/Cylinder001Collision"]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0, 0 )
mesh = SubResource( 15 )
material/0 = null
